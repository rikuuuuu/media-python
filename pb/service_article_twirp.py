# -*- coding: utf-8 -*-
# Generated by https://github.com/verloop/twirpy/protoc-gen-twirpy.  DO NOT EDIT!
# source: service_article.proto

from google.protobuf import symbol_database as _symbol_database

from twirp.base import Endpoint
from twirp.server import TwirpServer
from twirp.client import TwirpClient

_sym_db = _symbol_database.Default()

class ArticleServiceServer(TwirpServer):

	def __init__(self, *args, service, server_path_prefix="/twirp"):
		super().__init__(service=service)
		self._prefix = F"{server_path_prefix}/api.ArticleService"
		self._endpoints = {
			"Get": Endpoint(
				service_name="ArticleService",
				name="Get",
				function=getattr(service, "Get"),
				input=_sym_db.GetSymbol("entity.ArticleID"),
				output=_sym_db.GetSymbol("entity.Article"),
			),
			"GetAll": Endpoint(
				service_name="ArticleService",
				name="GetAll",
				function=getattr(service, "GetAll"),
				input=_sym_db.GetSymbol("entity.Pager"),
				output=_sym_db.GetSymbol("entity.ArticleList"),
			),
			"Create": Endpoint(
				service_name="ArticleService",
				name="Create",
				function=getattr(service, "Create"),
				input=_sym_db.GetSymbol("entity.CreateArticleRequest"),
				output=_sym_db.GetSymbol("entity.Article"),
			),
			"Update": Endpoint(
				service_name="ArticleService",
				name="Update",
				function=getattr(service, "Update"),
				input=_sym_db.GetSymbol("entity.UpdateArticleRequest"),
				output=_sym_db.GetSymbol("entity.Article"),
			),
			"Delete": Endpoint(
				service_name="ArticleService",
				name="Delete",
				function=getattr(service, "Delete"),
				input=_sym_db.GetSymbol("entity.ArticleID"),
				output=_sym_db.GetSymbol("entity.Empty"),
			),
		}

class ArticleServiceClient(TwirpClient):

	def Get(self, *args, ctx, request, server_path_prefix="/twirp", **kwargs):
		return self._make_request(
			url=F"{server_path_prefix}/api.ArticleService/Get",
			ctx=ctx,
			request=request,
			response_obj=_sym_db.GetSymbol("entity.Article"),
			**kwargs,
		)

	def GetAll(self, *args, ctx, request, server_path_prefix="/twirp", **kwargs):
		return self._make_request(
			url=F"{server_path_prefix}/api.ArticleService/GetAll",
			ctx=ctx,
			request=request,
			response_obj=_sym_db.GetSymbol("entity.ArticleList"),
			**kwargs,
		)

	def Create(self, *args, ctx, request, server_path_prefix="/twirp", **kwargs):
		return self._make_request(
			url=F"{server_path_prefix}/api.ArticleService/Create",
			ctx=ctx,
			request=request,
			response_obj=_sym_db.GetSymbol("entity.Article"),
			**kwargs,
		)

	def Update(self, *args, ctx, request, server_path_prefix="/twirp", **kwargs):
		return self._make_request(
			url=F"{server_path_prefix}/api.ArticleService/Update",
			ctx=ctx,
			request=request,
			response_obj=_sym_db.GetSymbol("entity.Article"),
			**kwargs,
		)

	def Delete(self, *args, ctx, request, server_path_prefix="/twirp", **kwargs):
		return self._make_request(
			url=F"{server_path_prefix}/api.ArticleService/Delete",
			ctx=ctx,
			request=request,
			response_obj=_sym_db.GetSymbol("entity.Empty"),
			**kwargs,
		)
